{
  "openapi": "3.0.0",
  "info": {
    "title": "Hasura auth",
    "description": "Authentication for Hasura",
    "license": {
      "name": "MIT",
      "url": ""
    },
    "termsOfService": "",
    "version": "0.7.1"
  },
  "servers": [],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "SignInPasswordlessEmailSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "A valid email",
            "example": "john.smith@nhost.io"
          },
          "options": {
            "type": "object",
            "properties": {
              "locale": {
                "type": "string",
                "description": "A two-characters locale",
                "example": "en",
                "default": "en"
              },
              "defaultRole": {
                "type": "string",
                "enum": [
                  "me",
                  "user"
                ],
                "example": "user",
                "default": "user"
              },
              "allowedRoles": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "enum": [
                        "me"
                      ]
                    },
                    {
                      "enum": [
                        "user"
                      ]
                    }
                  ]
                },
                "example": [
                  "me",
                  "user"
                ],
                "default": [
                  "me",
                  "user"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "John Smith"
              },
              "metadata": {
                "type": "object",
                "properties": {},
                "additionalProperties": false,
                "example": {
                  "firstName": "John",
                  "lastName": "Smith"
                },
                "default": {}
              },
              "redirectTo": {
                "anyOf": [
                  {
                    "type": "string",
                    "pattern": "^https:\\/\\/my-app.com"
                  }
                ],
                "example": "https://my-app.com/catch-redirection",
                "default": "https://my-app.com"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "SignUpEmailPasswordSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "A valid email",
            "example": "john.smith@nhost.io"
          },
          "password": {
            "type": "string",
            "minLength": 3,
            "description": "A password of minimum 3 characters",
            "example": "Str0ngPassw#ord-94|%"
          },
          "options": {
            "type": "object",
            "properties": {
              "locale": {
                "type": "string",
                "description": "A two-characters locale",
                "example": "en",
                "default": "en"
              },
              "defaultRole": {
                "type": "string",
                "enum": [
                  "me",
                  "user"
                ],
                "example": "user",
                "default": "user"
              },
              "allowedRoles": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "enum": [
                        "me"
                      ]
                    },
                    {
                      "enum": [
                        "user"
                      ]
                    }
                  ]
                },
                "example": [
                  "me",
                  "user"
                ],
                "default": [
                  "me",
                  "user"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "John Smith"
              },
              "metadata": {
                "type": "object",
                "properties": {},
                "additionalProperties": false,
                "example": {
                  "firstName": "John",
                  "lastName": "Smith"
                },
                "default": {}
              },
              "redirectTo": {
                "anyOf": [
                  {
                    "type": "string",
                    "pattern": "^https:\\/\\/my-app.com"
                  }
                ],
                "example": "https://my-app.com/catch-redirection",
                "default": "https://my-app.com"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "email",
          "password"
        ],
        "additionalProperties": false
      },
      "SignInEmailPasswordSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "A valid email",
            "example": "john.smith@nhost.io"
          },
          "password": {
            "type": "string",
            "example": "Str0ngPassw#ord-94|%"
          }
        },
        "required": [
          "email",
          "password"
        ],
        "additionalProperties": false
      },
      "SignInPasswordlessSmsSchema": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string"
          },
          "options": {
            "type": "object",
            "properties": {
              "locale": {
                "type": "string",
                "description": "A two-characters locale",
                "example": "en",
                "default": "en"
              },
              "defaultRole": {
                "type": "string",
                "enum": [
                  "me",
                  "user"
                ],
                "example": "user",
                "default": "user"
              },
              "allowedRoles": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "enum": [
                        "me"
                      ]
                    },
                    {
                      "enum": [
                        "user"
                      ]
                    }
                  ]
                },
                "example": [
                  "me",
                  "user"
                ],
                "default": [
                  "me",
                  "user"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "John Smith"
              },
              "metadata": {
                "type": "object",
                "properties": {},
                "additionalProperties": false,
                "example": {
                  "firstName": "John",
                  "lastName": "Smith"
                },
                "default": {}
              },
              "redirectTo": {
                "anyOf": [
                  {
                    "type": "string",
                    "pattern": "^https:\\/\\/my-app.com"
                  }
                ],
                "example": "https://my-app.com/catch-redirection",
                "default": "https://my-app.com"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "phoneNumber"
        ],
        "additionalProperties": false
      },
      "SignInOtpSchema": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string"
          },
          "otp": {
            "type": "string"
          }
        },
        "required": [
          "phoneNumber",
          "otp"
        ],
        "additionalProperties": false
      },
      "SignInMfaTotpSchema": {
        "type": "object",
        "properties": {
          "ticket": {
            "type": "string",
            "pattern": "mfaTotp:\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b",
            "example": "mfaTotp:e08204c7-40af-4434-a7ed-31c6aa37a390"
          },
          "otp": {
            "type": "string"
          }
        },
        "required": [
          "ticket",
          "otp"
        ],
        "additionalProperties": false
      },
      "SignInAnonymousSchema": {
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "description": "A two-characters locale",
            "example": "en",
            "default": "en"
          },
          "displayName": {
            "type": "string",
            "example": "John Smith"
          },
          "metadata": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "example": {
              "firstName": "John",
              "lastName": "Smith"
            },
            "default": {}
          }
        },
        "additionalProperties": false
      },
      "SignOutSchema": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "pattern": "\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b",
            "description": "Refresh token during authentication or when refreshing the JWT",
            "example": "2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24"
          },
          "all": {
            "type": "boolean",
            "description": "Sign out from all connected devices",
            "default": false
          }
        },
        "required": [
          "refreshToken"
        ],
        "additionalProperties": false
      },
      "UserPasswordResetSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "A valid email",
            "example": "john.smith@nhost.io"
          },
          "options": {
            "type": "object",
            "properties": {
              "redirectTo": {
                "anyOf": [
                  {
                    "type": "string",
                    "pattern": "^https:\\/\\/my-app.com"
                  }
                ],
                "example": "https://my-app.com/catch-redirection",
                "default": "https://my-app.com"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "UserPasswordSchema": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "example": "Str0ngPassw#ord-94|%"
          }
        },
        "required": [
          "newPassword"
        ],
        "additionalProperties": false
      },
      "UserEmailChangeSchema": {
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string",
            "format": "email",
            "description": "A valid email",
            "example": "john.smith@nhost.io"
          },
          "options": {
            "type": "object",
            "properties": {
              "redirectTo": {
                "anyOf": [
                  {
                    "type": "string",
                    "pattern": "^https:\\/\\/my-app.com"
                  }
                ],
                "example": "https://my-app.com/catch-redirection",
                "default": "https://my-app.com"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "UserEmailSendVerificationEmailSchema": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "A valid email",
            "example": "john.smith@nhost.io"
          },
          "options": {
            "type": "object",
            "properties": {
              "redirectTo": {
                "anyOf": [
                  {
                    "type": "string",
                    "pattern": "^https:\\/\\/my-app.com"
                  }
                ],
                "example": "https://my-app.com/catch-redirection",
                "default": "https://my-app.com"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "email"
        ],
        "additionalProperties": false
      },
      "UserMfaSchema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "MFA activation code"
          },
          "activeMfaType": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "type": "string",
                "enum": [
                  "totp"
                ]
              }
            ],
            "description": "Multi-factor authentication type. A null value deactivates MFA",
            "example": "totp"
          }
        },
        "required": [
          "code"
        ],
        "additionalProperties": false
      },
      "UserDeanonymizeSchema": {
        "type": "object",
        "properties": {
          "signInMethod": {
            "type": "string",
            "enum": [
              "email-password",
              "passwordless"
            ],
            "example": "email-password"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "A valid email",
            "example": "john.smith@nhost.io"
          },
          "password": {
            "type": "string",
            "example": "Str0ngPassw#ord-94|%"
          },
          "connection": {
            "type": "string",
            "example": "email"
          },
          "options": {
            "type": "object",
            "properties": {
              "locale": {
                "type": "string",
                "description": "A two-characters locale",
                "example": "en",
                "default": "en"
              },
              "defaultRole": {
                "type": "string",
                "enum": [
                  "me",
                  "user"
                ],
                "example": "user",
                "default": "user"
              },
              "allowedRoles": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "enum": [
                        "me"
                      ]
                    },
                    {
                      "enum": [
                        "user"
                      ]
                    }
                  ]
                },
                "example": [
                  "me",
                  "user"
                ],
                "default": [
                  "me",
                  "user"
                ]
              },
              "displayName": {
                "type": "string",
                "example": "John Smith"
              },
              "metadata": {
                "type": "object",
                "properties": {},
                "additionalProperties": false,
                "example": {
                  "firstName": "John",
                  "lastName": "Smith"
                },
                "default": {}
              },
              "redirectTo": {
                "anyOf": [
                  {
                    "type": "string",
                    "pattern": "^https:\\/\\/my-app.com"
                  }
                ],
                "example": "https://my-app.com/catch-redirection",
                "default": "https://my-app.com"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "signInMethod",
          "email"
        ],
        "additionalProperties": false
      },
      "UserProviderTokensSchema": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string"
          },
          "userId": {
            "type": "string",
            "pattern": "\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b",
            "description": "Id of the user",
            "example": "2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24"
          }
        },
        "required": [
          "providerId",
          "userId"
        ],
        "additionalProperties": false
      },
      "TokenSchema": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "pattern": "\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b",
            "description": "Refresh token during authentication or when refreshing the JWT",
            "example": "2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24"
          }
        },
        "required": [
          "refreshToken"
        ],
        "additionalProperties": false
      },
      "VerifySchema": {
        "type": "object",
        "properties": {
          "redirectTo": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^https:\\/\\/my-app.com"
              }
            ],
            "example": "https://my-app.com/catch-redirection",
            "default": "https://my-app.com"
          },
          "ticket": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "required": [
          "redirectTo",
          "ticket",
          "type"
        ],
        "additionalProperties": false
      },
      "RouteNotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "route-not-found"
            ]
          },
          "message": {
            "enum": [
              "Route not found"
            ]
          },
          "status": {
            "enum": [
              404
            ]
          }
        },
        "additionalProperties": false
      },
      "DisabledEndpointError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "disabled-endpoint"
            ]
          },
          "message": {
            "enum": [
              "This endpoint is disabled"
            ]
          },
          "status": {
            "enum": [
              404
            ]
          }
        },
        "additionalProperties": false
      },
      "InvalidRequestError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "invalid-request"
            ]
          },
          "message": {
            "enum": [
              "The request payload is incorrect"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "DisabledMfaTotpError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "disabled-mfa-totp"
            ]
          },
          "message": {
            "enum": [
              "MFA TOTP is not enabled for this user"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "NoTotpSecretError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "no-totp-secret"
            ]
          },
          "message": {
            "enum": [
              "OTP secret is not set for user"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "DisabledUserError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "disabled-user"
            ]
          },
          "message": {
            "enum": [
              "User is disabled"
            ]
          },
          "status": {
            "enum": [
              401
            ]
          }
        },
        "additionalProperties": false
      },
      "InvalidEmailPasswordError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "invalid-email-password"
            ]
          },
          "message": {
            "enum": [
              "Incorrect email or password"
            ]
          },
          "status": {
            "enum": [
              401
            ]
          }
        },
        "additionalProperties": false
      },
      "InvalidOtpError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "invalid-otp"
            ]
          },
          "message": {
            "enum": [
              "Invalid or expired OTP"
            ]
          },
          "status": {
            "enum": [
              401
            ]
          }
        },
        "additionalProperties": false
      },
      "InvalidTicketError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "invalid-ticket"
            ]
          },
          "message": {
            "enum": [
              "Invalid or expired verification ticket"
            ]
          },
          "status": {
            "enum": [
              401
            ]
          }
        },
        "additionalProperties": false
      },
      "UnverifiedUserError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "unverified-user"
            ]
          },
          "message": {
            "enum": [
              "Email is not verified"
            ]
          },
          "status": {
            "enum": [
              401
            ]
          }
        },
        "additionalProperties": false
      },
      "EmailAlreadyInUseError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "email-already-in-use"
            ]
          },
          "message": {
            "enum": [
              "Email already in use"
            ]
          },
          "status": {
            "enum": [
              409
            ]
          }
        },
        "additionalProperties": false
      },
      "MfaTypeNotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "mfa-type-not-found"
            ]
          },
          "message": {
            "enum": [
              "There is no active MFA set for the user"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "EmailAlreadyVerifiedError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "email-already-verified"
            ]
          },
          "message": {
            "enum": [
              "User's email is already verified"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "TotpAlreadyActiveError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "totp-already-active"
            ]
          },
          "message": {
            "enum": [
              "TOTP MFA already active"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "UserNotFoundError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "user-not-found"
            ]
          },
          "message": {
            "enum": [
              "No user found"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "UserNotAnonymousError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "user-not-anonymous"
            ]
          },
          "message": {
            "enum": [
              "Logged in user is not anonymous"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "InvalidRefreshTokenError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "invalid-refresh-token"
            ]
          },
          "message": {
            "enum": [
              "Invalid or expired refresh token"
            ]
          },
          "status": {
            "enum": [
              401
            ]
          }
        },
        "additionalProperties": false
      },
      "InvalidRedirectionError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "invalid-redirection"
            ]
          },
          "message": {
            "enum": [
              "Invalid or missing redirectTo"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "InvalidAdminSecretError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "invalid-admin-secret"
            ]
          },
          "message": {
            "enum": [
              "Invalid admin secret"
            ]
          },
          "status": {
            "enum": [
              401
            ]
          }
        },
        "additionalProperties": false
      },
      "UnauthenticatedUserError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "unauthenticated-user"
            ]
          },
          "message": {
            "enum": [
              "User is not logged in"
            ]
          },
          "status": {
            "enum": [
              401
            ]
          }
        },
        "additionalProperties": false
      },
      "ForbiddenEndpointInProductionError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "forbidden-endpoint-in-production"
            ]
          },
          "message": {
            "enum": [
              "This endpoint is only available on test environments"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "InvalidSignInMethodError": {
        "type": "object",
        "properties": {
          "error": {
            "enum": [
              "invalid-sign-in-method"
            ]
          },
          "message": {
            "enum": [
              "Incorrect sign in method"
            ]
          },
          "status": {
            "enum": [
              400
            ]
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "pattern": "\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b",
            "description": "Id of the user",
            "example": "2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "displayName": {
            "type": "string",
            "example": "John Smith"
          },
          "avatarUrl": {
            "type": "string"
          },
          "locale": {
            "type": "string",
            "description": "A two-characters locale",
            "example": "en",
            "default": "en"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "A valid email",
            "example": "john.smith@nhost.io"
          },
          "isAnonymous": {
            "type": "boolean",
            "default": false
          },
          "defaultRole": {
            "type": "string",
            "enum": [
              "me",
              "user"
            ],
            "example": "user",
            "default": "user"
          },
          "metadata": {
            "type": "object",
            "properties": {},
            "additionalProperties": false,
            "example": {
              "firstName": "John",
              "lastName": "Smith"
            },
            "default": {}
          },
          "activeMfaType": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "type": "string",
                "enum": [
                  "totp"
                ]
              }
            ],
            "description": "Multi-factor authentication type. A null value deactivates MFA",
            "example": "totp"
          },
          "emailVerified": {
            "type": "boolean",
            "default": false
          },
          "phoneNumber": {
            "type": "string"
          },
          "phoneNumberVerified": {
            "type": "boolean",
            "default": false
          },
          "roles": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "enum": [
                    "me"
                  ]
                },
                {
                  "enum": [
                    "user"
                  ]
                }
              ]
            },
            "example": [
              "me",
              "user"
            ],
            "default": [
              "me",
              "user"
            ]
          }
        },
        "required": [
          "createdAt",
          "displayName",
          "avatarUrl",
          "locale",
          "email",
          "isAnonymous",
          "defaultRole",
          "metadata",
          "activeMfaType",
          "emailVerified",
          "phoneNumber",
          "phoneNumberVerified",
          "roles"
        ],
        "additionalProperties": false
      },
      "Session": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "accessTokenExpiresIn": {
            "type": "number",
            "format": "float"
          },
          "refreshToken": {
            "type": "string",
            "pattern": "\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b",
            "description": "Refresh token during authentication or when refreshing the JWT",
            "example": "2c35b6f3-c4b9-48e3-978a-d4d0f1d42e24"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "accessToken",
          "accessTokenExpiresIn",
          "refreshToken"
        ],
        "additionalProperties": false
      },
      "Mfa": {
        "type": "object",
        "properties": {
          "ticket": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SessionPayload": {
        "type": "object",
        "properties": {
          "session": {
            "$ref": "#/components/schemas/Session"
          },
          "mfa": {
            "$ref": "#/components/schemas/Mfa"
          }
        },
        "additionalProperties": false
      },
      "TotpPayload": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string",
            "description": "Data URL of the QR code"
          },
          "totpSecret": {
            "type": "string",
            "description": "TOTP secret"
          }
        },
        "required": [
          "imageUrl",
          "totpSecret"
        ],
        "additionalProperties": false
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "status": {
            "enum": [
              401
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "error",
          "status"
        ],
        "additionalProperties": false
      },
      "Version": {
        "type": "string",
        "example": "0.7.1"
      }
    }
  },
  "paths": {
    "/healthz": {
      "get": {
        "deprecated": false,
        "summary": "Check if the server is up and running",
        "security": [],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "parameters": [],
        "tags": [
          "General"
        ]
      }
    },
    "/version": {
      "get": {
        "deprecated": false,
        "summary": "Get the current Hasura-auth version",
        "security": [],
        "responses": {
          "200": {
            "description": "Hasura auth version",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "General"
        ]
      }
    },
    "/mfa/totp/generate": {
      "get": {
        "deprecated": false,
        "summary": "Generate a secret to request the activation of Time-based One-Time Password (TOTP) multi-factor authentication",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TotpPayload"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthenticatedUserError"
                }
              }
            }
          },
          "404": {
            "description": "The feature is not activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledEndpointError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "User management"
        ]
      }
    },
    "/signin/email-password": {
      "post": {
        "deprecated": false,
        "summary": "Authenticate with email + password",
        "security": [],
        "responses": {
          "200": {
            "description": "Signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPayload"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Invalid email or password, or user is not verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "The feature is not activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledEndpointError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInEmailPasswordSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/signin/passwordless/email": {
      "post": {
        "deprecated": false,
        "summary": "Email passwordless authentication",
        "security": [],
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "User is disabled",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledUserError"
                }
              }
            }
          },
          "404": {
            "description": "The feature is not activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledEndpointError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInPasswordlessEmailSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/signin/passwordless/sms": {
      "post": {
        "deprecated": false,
        "summary": "Send a one-time password by SMS",
        "security": [],
        "responses": {
          "200": {
            "description": "SMS sent successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "404": {
            "description": "The feature is not activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledEndpointError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInPasswordlessSmsSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/signin/passwordless/sms/otp": {
      "post": {
        "deprecated": false,
        "summary": "Passwordless authentication from a one-time password code received by SMS",
        "security": [],
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPayload"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Error processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "The feature is not activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledEndpointError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInOtpSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/signin/anonymous": {
      "post": {
        "deprecated": false,
        "summary": "Anonymous authentication",
        "security": [],
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPayload"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "404": {
            "description": "The feature is not activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledEndpointError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInAnonymousSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/signin/mfa/totp": {
      "post": {
        "deprecated": false,
        "summary": "Sign in with a Time-base One-Time Password (TOTP) ticket",
        "security": [],
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPayload"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "404": {
            "description": "The feature is not activated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledEndpointError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInMfaTotpSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/signin/provider/{provider}": {
      "get": {
        "deprecated": false,
        "summary": "",
        "security": [],
        "responses": {},
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "name param description",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string",
              "enum": [
                "github",
                "google",
                "facebook",
                "twitter",
                "apple",
                "windowslive",
                "linkedin",
                "spotify",
                "strava",
                "gitlab",
                "bitbucket"
              ]
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "-",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/signin/provider/{provider}/callback": {
      "get": {
        "deprecated": false,
        "summary": "Oauth callback url, that will be used by the Oauth provider, to redirect to the client application. Attention: all providers are using a GET operation, except Apple that uses POST",
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect to the initial url given as a query parameter in /signin/provider/{provider}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "provider",
            "in": "path",
            "description": "name param description",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string",
              "enum": [
                "github",
                "google",
                "facebook",
                "twitter",
                "apple",
                "windowslive",
                "linkedin",
                "spotify",
                "strava",
                "gitlab",
                "bitbucket"
              ]
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Authentication"
        ]
      }
    },
    "/signout": {
      "post": {
        "deprecated": false,
        "summary": "Sign out",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully signed out",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "User must be signed in to sign out from all sessions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthenticatedUserError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Sign out"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignOutSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/signup/email-password": {
      "post": {
        "deprecated": false,
        "summary": "Signup with email and password",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully registered. Null session means email verification is pending",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPayload"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "409": {
            "description": "Email is already present in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAlreadyInUseError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Registration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpEmailPasswordSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/token": {
      "post": {
        "deprecated": false,
        "summary": "Refresh the access token (JWT) and the refresh token",
        "security": [],
        "responses": {
          "200": {
            "description": "User successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionPayload"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthenticated user or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "General"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/user": {
      "get": {
        "deprecated": false,
        "summary": "Get user information",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthenticatedUserError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "User management"
        ]
      }
    },
    "/user/password/reset": {
      "post": {
        "deprecated": false,
        "summary": "Send an email asking the user to reset their password",
        "security": [],
        "responses": {
          "200": {
            "description": "The email to reset the password has been sent",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "User management"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordResetSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/user/password": {
      "post": {
        "deprecated": false,
        "summary": "Set a new password",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The password has been successfully changed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthenticatedUserError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "User management"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/user/email/send-verification-email": {
      "post": {
        "deprecated": false,
        "summary": "Send an email to verify the account",
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload format is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "User management"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEmailSendVerificationEmailSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/user/email/change": {
      "post": {
        "deprecated": false,
        "summary": "Change the current user's email",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A verification email has been sent to the new email",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload format is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthenticatedUserError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "User management"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEmailChangeSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/user/mfa": {
      "post": {
        "deprecated": false,
        "summary": "Activate/deactivate Multi-factor authentication",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload format is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthenticatedUserError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserMfaSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/user/deanonymize": {
      "post": {
        "deprecated": false,
        "summary": "'Deanonymize' an anonymous user in adding missing email or email+password, depending on the chosen authentication method. Will send a confirmation email if the server is configured to do so.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload format is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "User is not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthenticatedUserError"
                }
              }
            }
          }
        },
        "parameters": [],
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDeanonymizeSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/user/provider/tokens": {
      "post": {
        "deprecated": false,
        "summary": "Refresh the Oauth access tokens of a given user. You must be an admin to perform this operation.",
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload format is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Incorrect admin secret header",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidAdminSecretError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "x-hasura-admin-secret",
            "in": "header",
            "description": "Hasura admin secret",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "User management"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProviderTokensSchema"
              }
            }
          },
          "description": "",
          "required": true
        }
      }
    },
    "/verify": {
      "get": {
        "deprecated": false,
        "summary": "Verify tickets created by email verification, email passwordless authentication, or password reset",
        "security": [],
        "responses": {
          "302": {
            "description": "{redirectTo}?refreshToken=${refreshToken}&type=${type}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The payload format is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidRequestError"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "ticket",
            "in": "query",
            "description": "Ticket generated in the previous actions and sent by email",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "name param description",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string",
              "enum": [
                "emailVerify",
                "emailConfirmChange",
                "signinPasswordless",
                "passwordReset"
              ]
            }
          },
          {
            "name": "redirectTo",
            "in": "query",
            "description": "Redirection link",
            "required": true,
            "deprecated": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "General"
        ]
      }
    }
  },
  "tags": []
}
